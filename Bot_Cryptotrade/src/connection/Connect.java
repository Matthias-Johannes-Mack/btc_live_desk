package connection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.InvalidKeyException;
import java.time.Instant;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.management.RuntimeErrorException;

public class Connect {
	private static final String key = "75a71235d874df1c6904aff3577cb840";
	
	private static final String passphrase = "d711lm9gi2d";
	/**
	 * key for the conenction
	 */
	private static final String secret = "EwCZqqClJnrrQRD8X6vzywVokhScLMPHBUw2XoR2wmy9qTc3lSxjzZu2hL8NzVH+u5cJMJ0ZU6/p9mg/+Kq0GA==";
	
	// http://localhost:8080/RESTfulExample/json/product/get
		public static void main(String[] args) {

		  try {
			// main url
			URL url = new URL("https://api.pro.coinbase.com/accounts/");
			// open connection
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			//timestamp
			 String timestamp = Instant.now().getEpochSecond() + "";
			 System.out.println(timestamp);
			//the message
			String jsonBody = "";
			Signature signature = new Signature();
			// conn type
			conn.setDoOutput(true);
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");
			conn.setRequestProperty("content-type", "application/json");
			conn.setRequestProperty("CB-ACCESS-KEY", key);
			conn.setRequestProperty("CB-ACCESS-SIGN", signature.generate("", "GET", jsonBody, timestamp, secret));
			conn.setRequestProperty("CB-ACCESS-TIMESTAMP", timestamp);
			conn.setRequestProperty("CB-ACCESS-PASSPHRASE", passphrase);
            conn.setRequestProperty("User-Agent", "Java Client"); 
	        
			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader(
				(conn.getInputStream())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = br.readLine()) != null) {
				System.out.println(output);
			}

			conn.disconnect();

		  } catch (MalformedURLException e) {

			e.printStackTrace();

		  } catch (IOException e) {

			e.printStackTrace();

		  }

		}
		/**
	     * The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using
	     * the base64-decoded secret key on the prehash string for:
	     * timestamp + method + requestPath + body (where + represents string concatenation)
	     * and base64-encode the output.
	     * The timestamp value is the same as the CB-ACCESS-TIMESTAMP header.
	     * @param requestPath
	     * @param method
	     * @param body
	     * @param timestamp
	     * @return
	     */
	    public String generate(String requestPath, String method, String body, String timestamp) {
	        try {
	            String prehash = timestamp + method.toUpperCase() + requestPath + body;
	            byte[] secretDecoded = Base64.getDecoder().decode(secret);
	            SecretKeySpec keyspec = new SecretKeySpec(secretDecoded, GdaxConstants.SHARED_MAC.getAlgorithm());
	            Mac sha256 = (Mac) GdaxConstants.SHARED_MAC.clone();
	            sha256.init(keyspec);
	            return Base64.getEncoder().encodeToString(sha256.doFinal(prehash.getBytes()));
	        } catch (CloneNotSupportedException | InvalidKeyException e) {
	            e.printStackTrace();
	            throw new RuntimeErrorException(new Error("Cannot set up authentication headers."));
	        }
	    }

	}

